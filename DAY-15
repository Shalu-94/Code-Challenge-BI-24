package practice_java;
import java.io.*;
import java.util.*;

class Graphs {

 // No. of vertices
 private int V;
 private LinkedList<Integer> adj[];
 Graphs(int v)
 {
     V = v;
     adj = new LinkedList[v];
     for (int i = 0; i < v; ++i)
         adj[i] = new LinkedList();
 }

 void addEdge(int v, int w) 
 { adj[v].add(w);
 }
 //dfs
 void DFSUtil(int v, boolean visited[])
 {
     // Mark the current node as visited and print it
     visited[v] = true;
     System.out.print(v + " ");

     // Recur for all the vertices adjacent to this
     // vertex
     Iterator<Integer> i = adj[v].listIterator();
     while (i.hasNext()) {
         int n = i.next();
         if (!visited[n])
             DFSUtil(n, visited);
     }
 }
 void DFS(int v)
 {
     boolean visited[] = new boolean[V];

     DFSUtil(v, visited);
 }

 // prints BFS traversal from a given source s
 void BFS(int s)
 {
     
     boolean visited[] = new boolean[V];

     // Create a queue for BFS
     LinkedList<Integer> queue
         = new LinkedList<Integer>();

     // Mark the current node as visited and enqueue it
     visited[s] = true;
     queue.add(s);

     while (queue.size() != 0) {

         // Dequeue a vertex from queue and print it
         s = queue.poll();
         System.out.print(s + " ");
         Iterator<Integer> i = adj[s].listIterator();
         while (i.hasNext()) {
             int n = i.next();
             if (!visited[n]) {
                 visited[n] = true;
                 queue.add(n);
             }
         }
     }
 }

 // Driver code
 public static void main(String args[])
 {
     Graphs g = new Graphs(4);
     g.addEdge(0, 1);
     g.addEdge(0, 2);
     g.addEdge(1, 2);
     g.addEdge(2, 0);
     g.addEdge(2, 3);
     g.addEdge(3, 3);

     System.out.println(
         "Breadth First Traversal "
         + "(starting from vertex 1)");

     g.BFS(1);
     System.out.println(
             "\n Depth First Traversal "
             + "(starting from vertex 2)");

         // Function call
         g.DFS(2);
     
     
 }
}
