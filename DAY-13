//QUEUES USING ARRAY
package practice_java;
import java.util.*;
public class QueueUsingArray {  
  private int maxSize;  
  private int[] queueArray;  
  private int front;  
  private int rear;  
  private int currentSize;  
  public QueueUsingArray(int size)  
  {  
    this.maxSize = size;  
    this.queueArray = new int[size];  
    front = 0;  
    rear = -1;  
    currentSize = 0;  
  }  
  public void insert(int item)  
  {  
    if(isQueueFull())  
    {  
      System.out.println("Queue is full!");  
      return;  
    }  
    if(rear == maxSize - 1)  
{  
      rear = -1;  
    }  
    queueArray[++rear] = item;  
    currentSize++;  
    System.out.println("Enqueue: " + item);  
  }  
     
  public int delete()  
  {  
    if(isQueueEmpty())  
    {  
      throw new RuntimeException("Queue is empty");  
    }  
      
    int temp = queueArray[front++];  
    if(front == maxSize)  
    {  
      front = 0;  
    }  
    currentSize--;  
    return temp;  
  }  
        
  public int peek()  
  {  
    return queueArray[front];  
  }  
  public boolean isQueueFull()  
  {  
    return (maxSize == currentSize);  
  }      
     
  public boolean isQueueEmpty()  
{  
    return (currentSize == 0);  
  }    
  public static void main(String[] args)   
  {  
	  QueueUsingArray queue = new  QueueUsingArray(10);  
    queue.insert(2);  
    queue.insert(3);  
    System.out.println("Dequeue: " + queue.delete());  
    queue.insert(5); 
    queue.insert(6); 
    System.out.println("Dequeue: " + queue.delete());   
    System.out.println("Front element:"+ queue.peek());
  }  
}  

//QUEUE USING LINKEDLIST
package practice_java;
class nodecreation {
    int data;
    Node next;

    nodecreation(int new_data) {
        this.data = new_data;
        this.next = null;
    }
}
class Queue {
      Node front, rear;

    Queue() { front = rear = null; }

    boolean isEmpty() {
        return front == null && rear == null;
    }

    void enqueue(int new_data) {
      
        Node new_node = new Node(new_data);

        if (rear == null) {
            front = rear = new_node;
            System.out.println("Enqueue:"+new_data);
            return;
        }
        rear.next = new_node;
        rear = new_node;
        System.out.println("Enqueue:"+new_data);
    }
    void dequeue() {
    
        if (isEmpty()) {
            System.out.println("Queue Underflow");
            return;
        }

        Node temp = front;
        front = front.next;
      
        if (front == null) {
            rear = null;
        }
    }

    int getFront() {
     
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return Integer.MIN_VALUE;
        }
        return front.data;
    }
}
public class QueueUsingLlist{
    public static void main(String[] args) {
        Queue q = new Queue();

        // Enqueue elements into the queue
        q.enqueue(10);
        q.enqueue(20);
        q.enqueue(30);
        q.enqueue(40);
        q.enqueue(50);
        q.dequeue();
        q.dequeue();
        System.out.println("Peek: " + q.getFront());
   
    }
}
